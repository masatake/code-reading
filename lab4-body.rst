1. データのライフサイクルに関連する関数の呼び出し順序(1)
-------------------------------------------------------------------------

~/fedora/coreutils-\*/src/sort.c中で
randread\_sourceという名前の構造体型が使われている。
その使われ方を読んで randread\_source構造体の
構築関数、操作関数、破壊関数の名前を延べよ。
またそれらの呼び出し順が

#. 構築関数
#. 操作関数
#. 破壊関数

になっていることを確認せよ。


2. データのライフサイクルに関連する関数の呼び出し順序(2)
-------------------------------------------------------------------------

~/fedora/coreutils-\*/src/wc.c中で
というargv\_iterator名前の構造体型が使われている。
その使われ方を読んで argv\_iterator構造体の
構築関数、操作関数、破壊関数の名前を延べよ。
またそれらの呼び出し順が

#. 構築関数
#. 操作関数
#. 破壊関数

になっていることを確認せよ。

3. データのライフサイクルに関連する関数の呼び出し順序(3)
-------------------------------------------------------------------------

~/fedora/coreutils-\*/src/chcon.c中のcompute\_context\_from\_mask
関数にてcontext\_t型が使われている。この型の定義はどこにあるか。
また構築関数、操作関数、破壊関数の名前を延べよ。

4. 関数ポインタの単純な利用の例
-------------------------------------------------------------------------

coreutils-\*/lib/exclude.c中のexclude\_fnmatchにて関数ポインタを活用し
ている箇所があります。関数ポインタがどのように活用されているかを説明し
て下さい。関数ポインタが指し示す関数の意味などの詳細について調べる必要
はありません。

5. コールバック関数呼び出し箇所の特定
-------------------------------------------------------------------------
1. manページを読んでbsearch関数について調べよ。
2. glibc中からbsearchの定義を探せ。
3. コールバック関数呼び出し行を特定せよ。

6. 追加の引数の活用箇所
-------------------------------------------------------------------------

coreutils-\*/src/install.c 中のprocess_dir関数中で、
make\_dir\_parents関数を呼び出しています。ここで make\_ancestor
関数がコールバック関数として渡されています。またoptionsという変数
も同様に渡されています。

一方同じファイルに定義
された make\_ancestor関数を読むと options という名前の第三引数
をとっています。これは「追加の引数」の引数の例です。

make\_dir\_parents関数の定義を調べ、make\_dir\_parents関数を呼び出す
ときに渡した引数が、コールバック関数process_dirへ引き渡されている
ことを確認して下さい。
