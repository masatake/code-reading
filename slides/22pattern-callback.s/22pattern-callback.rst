-------------------------------------------------------------------------
コードパターン: 関数ポインタとコールバック関数
-------------------------------------------------------------------------

.. include:: ../header.rst

概要
-------------------------------------------------------------------------
他のプログラムモジュールの処理の一部に独自の処理を組込む場合に、
「関数ポインタとコールバック関数」が使われる。

* 関数ポインタを受けとったコールバック関数を呼び出す処理
* コールバック関数を関数ポインタとして渡す処理

の組から成る。一方に遭遇したら他方を探してベースポイントと
することができる。

関数ポインタを受けとり、呼び出す処理
-------------------------------------------------------------------------
公開関数の宣言
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
処理を組込まれる側は、それを受けつけるための公開関数を提供している。

例

.. code-block:: c

	   void qsort(void *base, size_t nmemb, size_t size,
		      int(*compar)(const void *, const void *));

qsortはbaseで指定された配列の要素を並びかえる。並び換えの処理に必要
となる要素どうしの比較は、qsortの呼び出し元が与える引数comparが担当する。

引数comparにはvoid*型の引数を2つ取り、int型の値を返す関数への参照を渡す。


関数ポインタを受けとり、呼び出す処理
-------------------------------------------------------------------------
関数ポインタとして受けとったコールバック関数の呼び出し
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
公開関数の内部に関数ポインタ経由でコールバック関数を呼び出す箇所がある。

.. code-block:: c

	 if (compar((const void*)a, (const void*)b) < 0)
	 	...
	

あるいは

.. code-block:: c

	if ((*compar)((const void*)a, (const void*)b) < 0)
		...

関数ポインタを渡す処理
-------------------------------------------------------------------------
コールバック関数の定義
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
コールバック関数は、公開関数が期待するもの一致したシグネチャーを持つ。

.. code-block:: c

        int *array;
	
	int less_than(const void* a, const void* b)
	{
		int A = *(int *)a;
		int B = *(int *)b;

		if (A == B) return 0;
		elif (A < B) return 1;
		else return -1;
	}
	

関数ポインタを渡す処理
-------------------------------------------------------------------------
公開関数の呼び出し
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

less_thanをqsortに渡す。

.. code-block:: c

	qsort(array, array_length, sizeof(int), less_than);

あるいは

.. code-block:: c

	qsort(array, array_length, sizeof(int), &less_than);



コールバック関数の型
-------------------------------------------------------------------------

処理を組込まれる側は、公開関数の宣言とともに、受けとるコールバック関数の型を
typedefしていることがあります。

.. code-block:: c

	typedef int(* CompareFunc)(const void *, const void *);

	void qsort(void *base, size_t nmemb, size_t size,
	           CompareFunc compar);

	
コードパターンの拡張: 追加の引数
-------------------------------------------------------------------------

* コールバック関数が定義された側に由来するデータを、コールバック関数の処理で
  必要とする場合がある。

* 大域変数やファイルスコープ変数は使わずに引数を通してデータをコールバック関数に渡す。
  - 広いスコープの変数の導入を避けるため、
  - あるいは公開関数の呼び出しのたびに異なるデータを渡すため

* 引数経由でコールバック関数に渡すデータをユーザデータ、あるいは
  クライアントデータと言う。

* 公開関数はvoid \*型でユーザデータを受けつける。

* コールバック関数の定義中で好きな型にキャストする。
  


コードパターンの拡張: 追加の引数
-------------------------------------------------------------------------
例(受けとり側)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

擬似的にユーザデータを受けとるようqsortを拡張したqsort_xを考える。

.. code-block:: c

	   void qsort_x(void *base, size_t nmemb, size_t size,
		        int(*compar_x)(const void *, const void *, void *),
			void* user_data);
	    ....

qsort_xの内部では次のようにcompar_xを呼び出す記述は次のようになる。

.. code-block:: c

	 if (compar_x((const void*)a, (const void*)b, user_data) < 0)
	 	...

コードパターンの拡張: 追加の引数
-------------------------------------------------------------------------
例(呼び出し側)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

コールバック関数が必要とするデータを詰め合せた構造体変数を
用意して、void*にキャストして公開関数に渡す。

.. code-block:: c

	struct DataForQsort {
		int x;
	};

	int less_than_x(const void* a, const void* b, void* data);

	...

	struct DataForQsort data;
	data.x = n;
	...

	qsort_x(array, array_length, sizeof(int), less_than_x, &data);
	
	...

	int less_than_x(const void* a, const void* b, void* data) 
	{
		struct DataForQsort * qdata = (struct DataForQsort *)data;
		...
	}
	
	
.. コードパターンの拡張: 遅延処理
.. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

.. コードパターンの拡張: 返り値
.. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
