.. _ctags-usage:

ctagsの使い方
=======================================================================

tagging (狭義)
-----------------------------------------------------------------------

ソースコード中、プログラミング言語の文法の元で名前を付けて定義された
「何か」について (名前、ソースファイル、ファイル中の場所、その他)の情報を
組として記録すること。

----

「何か」には、例えば関数名、変数名、型の名前が考えられる。

taggingツールと出力フォーマット
-----------------------------------------------------------------------

.. csv-table::
    :header: ツール,フォーマット,併用すべきエディタ
    :widths: 20,25,30

       etags, TAGS, emacs
       ctags, tags, "vi, less, 様々"

tags出力の例
-----------------------------------------------------------------------
入力 (input.c)
.......................................................................
.. code-block:: C
   :include: ./input.c


tags出力の例
-----------------------------------------------------------------------
出力 (tags)
.......................................................................

::

    $ ctags -o - input.c
    debug	input.c	/^static boolean debug;$/;"	v	file:
    distance	input.c	/^int distance (pp p0, pp p1) {   \/* ... *\/}$/;"	f
    main	input.c	/^int main (int argc, char** argv) {$/;"	f
    point2d	input.c	/^struct point2d {int x, y;};$/;"	s	file:
    pp	input.c	/^typedef struct point2d *pp;$/;"	t	typeref:struct:point2d	file:
    x	input.c	/^struct point2d {int x, y;};$/;"	m	struct:point2d	file:
    y	input.c	/^struct point2d {int x, y;};$/;"	m	struct:point2d	file:


注意
-----------------------------------------------------------------------
ツールの出力は完全とは期待できません。特にプリプロセッサを多様している
入力に対しては、すぐにダマされて誤った結果を出力します。


基本的なコマンドラインオプション
-----------------------------------------------------------------------
::

   ctags [オプション] 入力ファイル


.. csv-table::
    :header: オプション, 意味
    :widths: 20,50


	     -R, "「入力ファイル」に指定したディレクトリ以下の全てのファイルを入力とする。"

	     "--exclude=pattern", "pattern に照合する名前を持つファイルを無視する。"

	     "-o `OUTPUT`","出力ファイル名を `OUTPUT` と指定する。`-` を指定すると標準出力に結果を書き出す。"

	     "-L","入力ファイルのリストを標準入力から受けとる。"

	     "--sort=yes|no", "結果を(出現順ではなく)アルファベット順にソートする。 (デフォルト: yes)"

	     "-x","cxref形式で出力する。"

対応する言語
-----------------------------------------------------------------------

* 品質にバラツキがありますがありますが、様々な言語に対応しています。

  - --list-languages で対応する言語を一覧できます。

  - 名前を捕捉する条件を正規表現で記述することで、未知の言語に対応できます。

* 主に拡張子から、言語を推測します。

  - --lang-map で 拡張子と言語の対応関係を一覧できます。

  - --language-force=LANG で 推測を無効にして特定の言語を想定した処理を強要できます。


「その他」の情報
-----------------------------------------------------------------------
--fieldsオプションで「その他」の情報の出力を制御できる。

kind

	「何か」の種別。言語毎に異なる。(後述)

file

	「何か」に対する名前の入力ファイルを範囲とするスコープを持つ。
	C言語で言うところのstatic

typeref

	- 「何か]が変数の場合、型の名前
	- 「何か]が型の別名の場合、元の型

language

	入力ファイルの記述言語

kind
-----------------------------------------------------------------------

* 言語LANGに対するkindは --list-kinds=LANG で一覧できます。

  ::

    $ ctags --list-kinds=C
    c  classes
    d  macro definitions
    ...
    l  local variables [off]

* デフォルトで無効となっているkindについては `[off]` と印付けされています。

* --<LANG>-kinds=[+|-]L として kind Lを有効、あるいは無効にできます。

  ::

     $ ctags --c-kinds=-d+l --list-kinds=C
     c  classes
     d  macro definitions [off]
     ...
     l  local variables

C言語に対するkindの制御の例
-----------------------------------------------------------------------

.. code-block:: C
   :include: ./input2.c

::

    $ ctags -o - input2.c
    main	input2.c	/^int main(void)$/;"	f
    $ ctags -o - --c-kinds=+l input2.c
    main	input2.c	/^int main(void)$/;"	f
    msg	input2.c	/^  const char *msg = "hello, world";$/;"	l
